function  b2sp(Brch,SLX)


bFSnsr='sm_lib/Frames and Transforms/Transform Sensor';
bFrame='sm_lib/Frames and Transforms/Rigid Transform';
bMotor='sm_lib/Body Elements/Cylindrical Solid';
bLinks='sm_lib/Body Elements/Brick Solid';
bJoint='sm_lib/Joints/Revolute Joint';


bCnver='nesl_utility/Simulink-PS Converter';
bPSver='nesl_utility/PS-Simulink Converter';
bLabel='nesl_utility/Connection Label';
bPorts='nesl_utility/Connection Port';

sCnver=[15 16];
sPorts=[30 14];
sMotor=[40 40];
sgForm=[40 20];

bSbsys='simulink/Commonly Used Blocks/Subsystem';
bOutpt='simulink/Commonly Used Blocks/Out1';
bInnpt='simulink/Commonly Used Blocks/In1';

bdMux='simulink/Signal Routing/Demux';
bFrom='simulink/Signal Routing/From';
bGoto='simulink/Signal Routing/Goto';
bMux ='simulink/Signal Routing/Mux';


offset=@(ph,d,s)[get_param(ph,'position')+[d -s(2)/2] get_param(ph,'position')+[d+s(1) s(2)/2] ];


% s='/';
I=num2str(Brch.index);



add_block(bSbsys,[SLX '/' ['Brch' I] ]);
slx =[SLX '/' 'Brch' I];
slxs=[slx '/'];
delete_line(slx,'In1/1','Out1/1');
delete_block([slxs 'In1' ]);
delete_block([slxs 'Out1']);


dofs=size(Brch.links,2);

p1=[0    0]-[500 0];
p2=[10 300]-[500 0];
pb=[0 400];
add_block(bMux,[slxs 'Mux q' I],'Inputs','6','Position',[p1 p2]);
qPH=get_param([slxs 'Mux q' I],'PortHandles');

p1=p1+pb;
p2=p2+pb;
add_block(bMux,[slxs 'Mux dq' I],'Inputs','6','Position',[p1 p2]);
dqPH=get_param([slxs 'Mux dq' I],'PortHandles');

p1=p1+pb;
p2=p2+pb;
add_block(bMux,[slxs 'Mux ddq' I],'Inputs','6','Position',[p1 p2]);
ddqPH=get_param([slxs 'Mux ddq' I],'PortHandles');

p1=p1+pb;
p2=p2+pb;
add_block(bdMux,[slxs 'DeMux tor' I],'Outputs','6','Position',[p1 p2]);
torPH=get_param([slxs 'DeMux tor' I],'PortHandles');



add_block( ...
     bPorts    ,[slxs 'Base'], ...
    'position' ,[0 0 sPorts]);

add_block( ...
     bLabel    , [slxs 'Connection Label Base'], ...
    'Label'    , 'Base', ...
    'position' , [100 0 101 1]);

add_line(slx,'Base/RConn1','Connection Label Base/LConn1');
LastFrame='Base';


add_block( ...
     bSbsys    ,[slx '/' 'Inertia Sensor'], ...
    'position' ,[700 0 900 200]);

IS=[slx '/' 'Inertia Sensor'];
delete_line(   IS ,'In1/1','Out1/1');
delete_block( [IS '/In1' ]);
delete_block( [IS '/Out1']);




pb=[0 300];
p1=[ 0 100]-pb;
p2=[50 350]-pb;

for j=1:dofs

    p1=p1+pb;
    p2=p2+pb;

    J=num2str(j);
    Index=[I J];

    add_block( ...
        bJoint              , [slxs 'joint ' Index], ...
        'position'           , [p1 p2], ...
        'MotionActuationMode', 'ComputedMotion', ...
        'TorqueActuationMode', 'InputTorque', ...
        'SensePosition'      , 'on', ...
        'SenseVelocity'      , 'on', ...
        'SenseAcceleration'  , 'on');

    JointPH=get_param([slxs 'joint ' Index],'PortHandles');

    add_block(bPSver,[slxs ['q' Index ' Cnver']],  'position',offset(JointPH.RConn(2),50,sCnver));
    add_block(bPSver,[slxs ['dq' Index ' Cnver']], 'position',offset(JointPH.RConn(3),50,sCnver));
    add_block(bPSver,[slxs ['ddq' Index ' Cnver']],'position',offset(JointPH.RConn(4),50,sCnver));

    add_block( ...
         bCnver                  ,[slxs 'Cnver ' Index], ...
        'position'               ,offset(JointPH.LConn(2),-50,sCnver), ...
        'FilteringAndDerivatives','Filter', ...
        'SimscapeFilterOrder'    ,'2');

    add_block( ...
         bLabel       , [slxs 'Connection Label Joint ' Index], ...
        'position'    , offset(JointPH.LConn(1),-100,sCnver),...
        'orientation' , 'left', ...
        'Label'       , LastFrame);

    add_block( ...
         bGoto     ,[slxs 'tor' Index ' goto'], ...
        'position' ,offset(torPH.Outport(j),50,sgForm), ...
        'GotoTag'  ,['tor' Index], ...
        'GotoTag'  ,['tor' Index]);

    add_block( ...
         bFrom     ,[slxs 'tor' Index ' from'], ...
        'position' ,offset(JointPH.LConn(2),-150,sgForm), ...
        'GotoTag'  ,['tor' Index], ...
        'GotoTag'  ,['tor' Index]);

    add_block( ...
         bGoto     ,[slxs 'q' Index ' goto'], ...
        'position' ,offset(JointPH.RConn(2),100,sgForm), ...
        'GotoTag'  ,['q' Index], ...
        'GotoTag'  ,['q' Index]);

    add_block( ...
         bFrom     ,[slxs 'q' Index ' from'], ...
        'position' ,offset(qPH.Inport(j),-50,sgForm), ...
        'GotoTag'  ,['q' Index], ...
        'GotoTag'  ,['q' Index]);

    add_block( ...
         bGoto     ,[slxs 'dq' Index ' goto'], ...
        'position' ,offset(JointPH.RConn(3),100,sgForm), ...
        'GotoTag'  ,['dq' Index], ...
        'GotoTag'  ,['dq' Index]);

    add_block( ...
         bFrom     ,[slxs 'dq' Index ' from'], ...
        'position' ,offset(dqPH.Inport(j),-50,sgForm), ...
        'GotoTag'  ,['dq' Index], ...
        'GotoTag'  ,['dq' Index]);

    add_block( ...
         bGoto     ,[slxs 'ddq' Index ' goto'], ...
        'position' ,offset(JointPH.RConn(4),100,sgForm), ...
        'GotoTag'  ,['ddq' Index], ...
        'GotoTag'  ,['ddq' Index]);

    add_block( ...
         bFrom     ,[slxs 'ddq' Index ' from'], ...
        'position' ,offset(ddqPH.Inport(j),-50,sgForm), ...
        'GotoTag'  ,['ddq' Index], ...
        'GotoTag'  ,['ddq' Index]);

    add_line(slx,['joint ' Index '/LConn1'],['Connection Label Joint ' Index '/LConn1']);
    add_line(slx,['joint ' Index '/LConn2'],['Cnver ' Index '/RConn1']);
    add_line(slx,['joint ' Index '/RConn2'],[   'q' Index ' Cnver' '/LConn1']);
    add_line(slx,['joint ' Index '/RConn3'],[  'dq' Index ' Cnver' '/LConn1']);
    add_line(slx,['joint ' Index '/RConn4'],[ 'ddq' Index ' Cnver' '/LConn1']);

    add_line(slx,[     'q' Index ' Cnver' '/1'],[  'q' Index ' goto' '/1']);
    add_line(slx,[    'dq' Index ' Cnver' '/1'],[ 'dq' Index ' goto' '/1']);
    add_line(slx,[   'ddq' Index ' Cnver' '/1'],['ddq' Index ' goto' '/1']);
    add_line(slx,[   'tor' Index  ' from' '/1'],['Cnver ' Index '/1']);

    add_line(slx,[     'q' Index ' from' '/1'],[   'Mux q' I '/' J]);
    add_line(slx,[    'dq' Index ' from' '/1'],[   'Mux dq' I '/' J]);
    add_line(slx,[   'ddq' Index ' from' '/1'],[   'Mux ddq' I '/' J]);
    add_line(slx,[   'DeMux tor' I '/' J],['tor' Index ' goto'  '/1']);

    sl =[slx '/' 'Link' Index];
    sls=[sl '/'];
    add_block(bSbsys,sl,'position',offset(JointPH.RConn(1),50,[200,60]));
    delete_line(sl,'In1/1','Out1/1');
    delete_block([sls 'In1']);
    delete_block([sls 'Out1']);
    add_block( ...
         bPorts   ,[sls 'Link' ' ' Index ' ' 'Port In'], ...
        'position',[0 0 sPorts]);

    add_line(slx,['joint ' Index '/RConn1'],['Link' Index '/LConn 1' ]);

    LastBlock=['Motor ' Index];
    add_block( ...
         bMotor         , [sls LastBlock], ...
        'position'      , [100 100 100+sMotor(1) 100+sMotor(2)],...
        'orientation'   , 'up',...
        'CylinderLength', num2str(Brch.links(j).motorLength), ...
        'CylinderRadius', num2str(Brch.links(j).motorRadius));
    
    add_line(sl, ['Link' ' ' Index ' ' 'Port In' '/RConn1'],[LastBlock '/RConn1'],'autorouting','smart');

    if abs(Brch.links(j).DH(1))>0.01
        add_block( ...
             bFrame                      ,[sls 'Frame d' Index], ...
            'position'                   , [150 -15 150+sMotor(1) -15+sMotor(2)],...
            'TranslationMethod'          ,'Cartesian', ...
            'TranslationCartesianOffset' ,['[' '0 ' '0 ' num2str(Brch.links(j).DH(1)/2) ']']);

        add_line(sl,[LastBlock '/RConn1'],['Frame d' Index '/LConn1'],'autorouting','smart');

        LastBlock=['d' Index];
        add_block( ...
             bMotor         , [sls LastBlock], ...
            'position'      , [200 100 200+sMotor(1) 100+sMotor(2)],...
            'orientation'   , 'up',...
            'CylinderLength', num2str(abs(Brch.links(j).DH(1)/2)), ...
            'CylinderRadius', num2str(Brch.links(j).dRadius));
        add_line(sl,['Frame d' Index '/RConn1'],[LastBlock '/RConn1'],'autorouting','smart');
    end

     if abs(Brch.links(j).DH(2))>0.01

        add_block( ...
            bFrame                     , [sls 'Frame a' Index],...
            'position'                 , [250 -15 250+sMotor(1) -15+sMotor(2)],...
           'TranslationMethod'         ,'Cartesian',...
           'TranslationCartesianOffset', ['[' num2str(Brch.links(j).DH(2)/2) ' 0 ' num2str(Brch.links(j).DH(1)/2) ']']);
        add_line(sl,[LastBlock  '/RConn1'],['Frame a' Index '/LConn1'],'autorouting','smart');

        LastBlock=['a' Index];
        add_block( ...
             bLinks               ,[sls LastBlock], ...
            'position'            , [300 100 300+sMotor(1) 100+sMotor(2)],...
            'orientation'         , 'up',...
           'BrickDimensions'      ,[ '[' num2str([abs(Brch.links(j).DH(2)) Brch.links(j).aWidth  Brch.links(j).aHeigh]) ']'], ...
           'GraphicDiffuseColor'  ,'[144/255 238/255 144/255]');
        add_line(sl,['Frame a' Index '/RConn1'],[LastBlock '/RConn1'],'autorouting','smart');
       
     end

     add_block( ...
          bFrame                       ,[sls 'Frame' Index], ...
         'position'                    ,[350 -15 350+sMotor(1) -15+sMotor(2)],...
         'TranslationMethod'           ,'Cartesian', ...
         'TranslationCartesianOffset'  ,['[' num2str([Brch.links(j).DH(2)/2 0 0]) ']'], ...
         'RotationMethod'              ,'StandardAxis', ...
         'RotationStandardAxis'        ,'+X', ...
         'RotationAngle'               ,num2str(rad2deg(Brch.links(j).DH(3))));
     add_line(sl,[LastBlock '/RConn1'],['Frame' Index '/LConn1'],'autorouting','smart');

     add_block( ...
          bPorts       ,[sls 'Link' ' ' Index ' ' 'Port Out'], ...
         'Side'        ,'right', ...
         'position'    ,[450 0 450+sPorts(1) 0+sPorts(2)], ...
         'orientation' , 'left');
     add_line(sl,['Frame' Index '/RConn1'],['Link' ' ' Index ' ' 'Port Out' '/RConn1']);

    add_block( ...
        bLabel,[slxs 'Connection Label Frame ' Index], ...
        'position',offset(JointPH.RConn(1),300,[0,20]),...
        'Label',['Frame' Index]);
    add_line(slxs,['Link' Index '/RConn1' ],['Connection Label Frame ' Index '/LConn1']);     
    LastFrame=['Frame' Index];
    
    add_block( ...
          'sm_lib/Body Elements/Inertia Sensor',[IS  '/Sensor ' Index], ...
          'position'                           ,[p1 p2], ...
          'SenseMass'                          ,'on', ...
          'SenseCenterOfMass'                  ,'on', ...
          'SenseInertiaMatrix'                 ,'on');

    isPH=get_param([IS  '/Sensor ' Index],'PortHandles');

    add_block( ...
         bPSver,[IS '/m' Index ' Cnver'], ...
        'position',offset(isPH.RConn(1),50,sCnver));

    add_block( ...
         bPSver,[IS '/rc' Index ' Cnver'], ...
        'position',offset(isPH.RConn(2),50,sCnver));

    add_block( ...
         bPSver,[IS '/I' Index ' Cnver'], ...
        'position',offset(isPH.RConn(3),50,sCnver));


        add_block( ...
            'simulink/Sinks/To Workspace',[IS '/m' Index ' data'], ...
            'position',offset(isPH.RConn(1),100,[50 20]), ...
            'VariableName',['m' Index], ...
            'SaveFormat','Array');
        add_block( ...
            'simulink/Sinks/To Workspace',[IS  '/rc' Index ' data'], ...
            'position',offset(isPH.RConn(2),100,[50 20]), ...
            'VariableName',['rc' Index], ...
           'SaveFormat','Array');
        add_block('simulink/Sinks/To Workspace',[IS  '/I' Index ' data'], ...
            'position',offset(isPH.RConn(3),100,[50 20]), ...
            'VariableName',['I' Index], ...
            'SaveFormat','Array');
        % 'Structure With Time'
        add_block( ...
             bPorts,[IS '/Inertia Sensor' Index ' Port'], ...
            'position',offset(isPH.LConn(1),-100,sPorts));


        add_line(IS,['Sensor ' Index   '/LConn1' ],['Inertia Sensor' Index ' Port' '/RConn1']);
        add_line(IS,['Sensor ' Index   '/RConn 1' ],['m' Index ' Cnver' '/LConn1']);
        add_line(IS,['Sensor ' Index   '/RConn 2' ],['rc' Index ' Cnver' '/LConn1']);
        add_line(IS,['Sensor ' Index   '/RConn 3' ],['I' Index ' Cnver' '/LConn1']);

        add_line(IS,[ 'm' Index ' Cnver'  '/1'],[ 'm' Index ' data'  '/1']);
        add_line(IS,['rc' Index ' Cnver'  '/1'],['rc' Index ' data'  '/1']);
        add_line(IS,[ 'I' Index ' Cnver'  '/1'],[ 'I' Index ' data'  '/1']);    

end

add_block( ...
     bSbsys    ,[sls 'IMU ' I], ...
    'position' ,[450 100 450+100 100+100]);
delete_line([sls  'IMU ' I], 'In1/1', 'Out1/1');
delete_block([sls 'IMU ' I '/In1' ]);
delete_block([sls 'IMU ' I '/Out1']);

add_block( ...
     bFSnsr          ,[sls 'IMU ' I '/IMU 1'], ...
    'position'       ,[0 0 50 250], ...
     'SenseR'        ,'on', ...
     'SenseOmega'    ,'on', ...
     'SenseAlpha'    ,'on', ...
     'SenseXYZ'      ,'on', ...
     'SenseXYZDot'   ,'on', ...
     'SenseXYZDDot'  ,'on');

h=get_param([sls 'IMU ' I '/IMU 1'],'PortHandles');

     add_block( ...
          bPorts       ,[sls 'IMU ' I '/Port In'], ...
         'Side'        ,'left', ...
         'position'    , offset(h.RConn(1),50,sPorts), ...
         'orientation' , 'left');

    add_block( ...
         bPSver,[sls 'IMU ' I '/Rb Cnver ' I], ...
        'position',offset(h.RConn(2),50,sCnver));

     add_block( ...
         bPSver,[sls 'IMU ' I '/wB Cnver ' I], ...
        'position',offset(h.RConn(3),50,sCnver));

     add_block( ...
         bPSver,[sls 'IMU ' I '/dwB Cnver ' I], ...
        'position',offset(h.RConn(4),50,sCnver));


        add_block( ...
         bPSver,[sls 'IMU ' I '/rB Cnver ' I], ...
        'position',offset(h.RConn(5),50,sCnver));

     add_block( ...
         bPSver,[sls 'IMU ' I '/drB Cnver ' I], ...
        'position',offset(h.RConn(6),50,sCnver));

     add_block( ...
         bPSver,[sls 'IMU ' I '/ddrB Cnver ' I], ...
        'position',offset(h.RConn(7),50,sCnver)); 


add_line([sls 'IMU ' I],'IMU 1/RConn 1','Port In/RConn 1');
add_line([sls 'IMU ' I],'IMU 1/RConn 2','Rb Cnver 1/LConn 1');
add_line([sls 'IMU ' I],'IMU 1/RConn 3','wB Cnver 1/LConn 1');
add_line([sls 'IMU ' I],'IMU 1/RConn 4','dwB Cnver 1/LConn 1');
add_line([sls 'IMU ' I],'IMU 1/RConn 5','rB Cnver 1/LConn 1');
add_line([sls 'IMU ' I],'IMU 1/RConn 6','drB Cnver 1/LConn 1');
add_line([sls 'IMU ' I],'IMU 1/RConn 7','ddrB Cnver 1/LConn 1');
add_line(sl, [LastFrame '/RConn 1'],['IMU ' I '/LConn 1'],'autorouting','smart');

  % add_line(sl,[LastFrame '/LConn 1' ],['Frame Foot ' I '/LConn 1'],'autorouting','smart');

switch Brch.EndType

    case 'Foot'

        add_block( ...
             bFrame                       ,[sls 'Frame Foot ' I], ...
            'position'                    ,[350 -100 350+sMotor(1) -100+sMotor(2)],...
            'TranslationMethod'           ,'Cartesian', ...
            'TranslationCartesianOffset'  ,['[' num2str([Brch.links(j).DH(2)/4 0 0]) ']'], ...
            'RotationMethod'              ,'StandardAxis', ...
            'RotationStandardAxis'        ,'+X', ...
            'RotationAngle'               ,num2str(rad2deg(Brch.links(j).DH(3))));


        add_block( ...
             bLinks               ,[sls 'Foot ' I], ...
            'position'            , [450 -150 450+sMotor(1) -150+sMotor(2)],...
            'orientation'         , 'down',...
            'BrickDimensions'      ,[ '[' num2str([abs(Brch.links(j).DH(2))/2 Brch.End(2)  Brch.End(1)]) ']'], ...
            'GraphicDiffuseColor'  ,'[144/255 238/255 144/255]');

        add_line(sl,[LastFrame '/LConn 1' ],['Frame Foot ' I '/LConn 1'],'autorouting','smart');
        add_line(sl,['Frame Foot ' I '/RConn 1'],['Foot ' I '/RConn 1'],'autorouting','smart');

    case 'Sphere'

    case 'none'

end


ISPH=get_param(IS,'PortHandles');
for j=1:dofs
    J=num2str(j);
    Index=[I J];
    Frame=['Frame' Index];
    add_block( ...
         bLabel      , [slxs 'Connection Label ' 'Sensor ' Index], ...
        'Label'      , Frame,  ...
        'orientation', 'left', ...
        'position'   , offset(ISPH.LConn(j),-100,[0 20]));
    add_line(slx,['Connection Label ' 'Sensor ' Index '/' 'LConn1'],['Inertia Sensor' '/LConn ' J]);
end

set_param(SLX,'stoptime','0.01');
add_line(SLX,['Brch' I '/LConn 1'],'World Frame/RConn 1','autorouting','smart');
load_system(SLX)
sim(SLX);

set_param(IS,'commented','on');


for j=1:dofs
    J=num2str(j);
    Index=[I J];
    Links(j).DH=Brch.links(j).DH;
    eval(['m=' 'ans.m' Index '(1);']);
    eval(['rc=' 'ans.rc' Index '(:,1,1);']);
    eval(['K=' 'ans.I' Index '(:,:,1);']);


    Links(j).m=m;
    Links(j).rC=rc;
    Links(j).I=K+m*skew(rc)*skew(rc);


end

end






